name: build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types:
      - published

jobs:
  version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Generate version file
        run: uv sync

      - name: Get version from .version file
        id: get_version
        run: |
          VERSION=$(cat .version)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

  test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Test with pytest
        run: uv run pytest --cov coretact

  build:
    runs-on: self-hosted
    needs: version

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set image tags
        id: set_tags
        run: |
          TAGS="ghcr.io/${{ github.repository }}:${{ github.sha }} ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAGS="$TAGS ghcr.io/${{ github.repository }}:latest"
          fi
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"

      - name: Build coretact image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ghcr.io/${{ github.repository }}
          platforms: linux/amd64
          tags: ${{ steps.set_tags.outputs.tags }}
          containerfiles: ./Containerfile

      - name: Push image
        uses: redhat-actions/push-to-registry@v2
        with:
          tags: ${{ steps.build_image.outputs.tags }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: self-hosted
    needs:
      - version
      - build
      - test
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: shinncloud
          SENTRY_PROJECT: coretact
        with:
          environment: production
          version: coretact@${{ needs.version.outputs.version }}

      - name: Deploy with Podman Play
        run: deploy/deploy.sh
        env:
          IMAGE: ghcr.io/${{ github.repository }}:${{ needs.version.outputs.version }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_BOT_OWNER_ID: ${{ secrets.DISCORD_BOT_OWNER_ID }}
          DISCORD_INVITE_URL: ${{ secrets.DISCORD_INVITE_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
